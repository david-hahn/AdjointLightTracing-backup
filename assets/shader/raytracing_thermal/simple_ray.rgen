#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_ray_tracing : require

#include "defines.h"
#include "../utils/glsl/ray_tracing_utils.glsl"
#include "../utils/glsl/rendering_utils.glsl"


#define CONV_TEXTURE_BINDING GLSL_GLOBAL_IMAGE_BINDING
#define CONV_TEXTURE_SET GLSL_GLOBAL_IMAGE_DESC_SET
#include "../convenience/glsl/texture_data.glsl"


layout(binding = GLSL_GLOBAL_UBO_BINDING, set = GLSL_GLOBAL_DESC_SET) uniform global_ubo { GlobalUbo ubo; };
layout(binding = GLSL_GLOBAL_AUX_UBO_BINDING, set = GLSL_GLOBAL_DESC_SET) uniform global_aux_ubo { AuxiliaryUbo aux_ubo; };
layout(binding = GLSL_GLOBAL_INSTANCE_DATA_BINDING, set = GLSL_GLOBAL_DESC_SET) buffer instance_ssbo { InstanceSSBO instance_buffer[]; };
layout(binding = GLSL_GLOBAL_GEOMETRY_DATA_BINDING, set = GLSL_GLOBAL_DESC_SET) buffer geometry_ssbo { GeometrySSBO geometry_buffer[]; };
struct vertex_s {
	vec4	position;
	vec4	normal;	
	vec4	tangent;

	vec2	texture_coordinates_0;
	vec2	texture_coordinates_1;
	vec4	color_0;
};
layout(binding = GLSL_GLOBAL_INDEX_BUFFER_BINDING, set = GLSL_GLOBAL_DESC_SET) buffer index_storage_buffer { uint index_buffer[]; };
layout(binding = GLSL_GLOBAL_VERTEX_BUFFER_BINDING, set = GLSL_GLOBAL_DESC_SET) buffer vertex_storage_buffer { vertex_s vertex_buffer[]; };

layout(binding = GLSL_GLOBAL_TRANSPORT_DATA_BINDING, set = GLSL_GLOBAL_DESC_SET) buffer transport_data_buffer { float transport_buffer[]; };
layout(binding = GLSL_GLOBAL_KELVIN_DATA_BINDING, set = GLSL_GLOBAL_DESC_SET) buffer kelvin_data_buffer { float kelvin_buffer[]; };

layout(binding = GLSL_GLOBAL_AS_BINDING, set = GLSL_GLOBAL_DESC_SET) uniform accelerationStructureEXT topLevelAS;
layout(binding = GLSL_GLOBAL_OUT_IMAGE_BINDING, set = GLSL_GLOBAL_DESC_SET, rg32f) uniform image2D output_image;

#include "payload.glsl"
layout(location = 0) rayPayloadEXT RayPayload rp;

struct Ray {
	vec3 origin, direction;
	float t_min, t_max;
};


vec2 getScreenCoordinates(){
	
	vec2 pixelOffset = vec2(0.5);
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + pixelOffset;
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	const vec2 screenCoordClipSpace  = inUV * 2.0 - 1.0;
	return screenCoordClipSpace;
}

Ray getRay(vec2 sccs)
{
	const vec4 origin = ubo.inverseViewMat * vec4(0,0,0,1);
	const vec4 target = ubo.inverseProjMat * vec4(sccs.x, sccs.y, 1, 1) ;
	const vec4 direction = ubo.inverseViewMat * vec4(normalize(target.xyz), 0) ;

	Ray ray;
	ray.origin = origin.xyz;
	ray.direction = direction.xyz;
	ray.t_min = 0.001;
	ray.t_max = 10000.0f;
	return ray;
}

vec4 colormap(float x) {
    float r = clamp(8.0 / 3.0 * x, 0.0, 1.0);
    float g = clamp(8.0 / 3.0 * x - 1.0, 0.0, 1.0);
    float b = clamp(4.0 * x - 3.0, 0.0, 1.0);
    return vec4(r, g, b, 1.0);
}

vec3 getNormal(uvec4 _vertex_indices, vec3 _barycentricCoords)
{	
	vertex_s v0 = vertex_buffer[_vertex_indices.x];	
	vertex_s v1 = vertex_buffer[_vertex_indices.y];	
	vertex_s v2 = vertex_buffer[_vertex_indices.z];
		
	mat4 model_matrix = instance_buffer[_vertex_indices.w].model_matrix;
		
	vec4 p0 = model_matrix * v0.position;	
	vec4 p1 = model_matrix * v1.position;
	vec4 p2 = model_matrix * v2.position;

	vec3 normal = normalize(cross(p1.xyz-p0.xyz, p2.xyz-p1.xyz));

	return normal;
}

void main() 
{
	
	vec2 sccs = getScreenCoordinates();
	Ray ray = getRay(sccs);

	rp.instanceID = -1;
	traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, 0xff, 0, 0, 0, ray.origin.xyz, ray.t_min + aux_ubo.clipDistance, ray.direction.xyz, ray.t_max, 0);

	
	if(rp.instanceID == -1) {
		imageStore(output_image, ivec2(gl_LaunchIDEXT.xy), vec4(0.05, 0.05, 0.05, 1));	
	} else {
		vec3 barycentricCoords = computeBarycentric(rp.hitAttribute);
		InstanceSSBO instance_data = instance_buffer[rp.instanceID];
		GeometrySSBO geometry_data = geometry_buffer[instance_data.geometry_buffer_offset + rp.geometryIndex];

		vec4 frag_color = vec4(1);
		
		
		uint idx_0 = 0;
		uint idx_1 = 0;
		uint idx_2 = 0;
		if(geometry_data.has_indices){
			idx_0 = index_buffer[geometry_data.index_buffer_offset + (rp.primitiveID * 3) + 0];
			idx_1 = index_buffer[geometry_data.index_buffer_offset + (rp.primitiveID * 3) + 1];
			idx_2 = index_buffer[geometry_data.index_buffer_offset + (rp.primitiveID * 3) + 2];
		} else {
			idx_0 = (rp.primitiveID * 3) + 0;
			idx_1 = (rp.primitiveID * 3) + 1;
			idx_2 = (rp.primitiveID * 3) + 2;
		}
				
		vec3 normal = getNormal(uvec4(geometry_data.vertex_buffer_offset + idx_0, geometry_data.vertex_buffer_offset +idx_1, geometry_data.vertex_buffer_offset +idx_2, rp.instanceID), barycentricCoords);
				
		uint vertex_count = aux_ubo.vertexCount;
		uint from_vertex_ind = aux_ubo.sourceVertexInd;
						
		float f0, f1, f2;

		if(aux_ubo.visualization == 0) {			
			f0 = transport_buffer[linFrom2D(from_vertex_ind, geometry_data.vertex_buffer_offset + idx_0, vertex_count)];
			f1 = transport_buffer[linFrom2D(from_vertex_ind, geometry_data.vertex_buffer_offset + idx_1, vertex_count)];
			f2 = transport_buffer[linFrom2D(from_vertex_ind, geometry_data.vertex_buffer_offset + idx_2, vertex_count)];
		} else if(aux_ubo.visualization == 1) {		
			f0 = transport_buffer[linFrom2D(geometry_data.vertex_buffer_offset + idx_0, from_vertex_ind, vertex_count)];
			f1 = transport_buffer[linFrom2D(geometry_data.vertex_buffer_offset + idx_1, from_vertex_ind, vertex_count)];
			f2 = transport_buffer[linFrom2D(geometry_data.vertex_buffer_offset + idx_2, from_vertex_ind, vertex_count)];
		} else {					
			f0 = kelvin_buffer[geometry_data.vertex_buffer_offset + idx_0];
			f1 = kelvin_buffer[geometry_data.vertex_buffer_offset + idx_1];
			f2 = kelvin_buffer[geometry_data.vertex_buffer_offset + idx_2];
		}

		vec3 factor = vec3(f0, f1, f2);
		float value = dot(factor, barycentricCoords) / aux_ubo.kelvinNormFactor;		
		frag_color = vec4(value, value, value, 1.0);
		frag_color *= aux_ubo.displayScale;

		if(aux_ubo.visualization < 2) {
			if(from_vertex_ind == geometry_data.vertex_buffer_offset + idx_0)
				frag_color.x = max(frag_color.x, barycentricCoords.x);

			if(from_vertex_ind == geometry_data.vertex_buffer_offset + idx_1)
				frag_color.x = max(frag_color.x, barycentricCoords.y);

			if(from_vertex_ind == geometry_data.vertex_buffer_offset + idx_2)
				frag_color.x = max(frag_color.x, barycentricCoords.z);
		}
				
		if(geometry_data.baseColorTexIdx != -1){

			vec3 v_0 = (instance_data.model_matrix * vertex_buffer[geometry_data.vertex_buffer_offset + idx_0].position).xyz;
			vec3 v_1 = (instance_data.model_matrix * vertex_buffer[geometry_data.vertex_buffer_offset + idx_1].position).xyz;
			vec3 v_2 = (instance_data.model_matrix * vertex_buffer[geometry_data.vertex_buffer_offset + idx_2].position).xyz;
			vec3 v = v_0 * barycentricCoords.x + v_1 * barycentricCoords.y + v_2 * barycentricCoords.z;

			vec2 uv_0 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_0].texture_coordinates_0.xy;
			vec2 uv_1 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_1].texture_coordinates_0.xy;
			vec2 uv_2 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_2].texture_coordinates_0.xy;
			vec2 uv = uv_0 * barycentricCoords.x + uv_1 * barycentricCoords.y + uv_2 * barycentricCoords.z;

			
			Ray ray_x = getRay(sccs + vec2(2.0 / float(gl_LaunchSizeEXT.x), 0));
			Ray ray_y = getRay(sccs - vec2(0, 2.0 / float(gl_LaunchSizeEXT.y)));
			vec3 bary_x = computeBarycentric2(mat3(v_0, v_1, v_2), ray_x.origin, ray_x.direction);
			vec3 bary_y = computeBarycentric2(mat3(v_0, v_1, v_2), ray_y.origin, ray_y.direction);

			vec3 pos_ws_x = v_0 * bary_x.x + v_1 * bary_x.y + v_2 * bary_x.z;
			vec3 pos_ws_y = v_0 * bary_y.x + v_1 * bary_y.y + v_2 * bary_y.z;

			vec2 tex_coord_x = uv_0 * bary_x.x + uv_1 * bary_x.y + uv_2 * bary_x.z;
			vec2 tex_coord_y = uv_0 * bary_y.x + uv_1 * bary_y.y + uv_2 * bary_y.z;
			tex_coord_x -= uv;
			tex_coord_y -= uv;
			tex_coord_x *= 0.5;
			tex_coord_y *= 0.5;

			
			
		}
		

		frag_color = colormap(length(frag_color.xyz ));

		imageStore(output_image, ivec2(gl_LaunchIDEXT.xy), vec4(frag_color.xyz, 1));		
		
	}
}

