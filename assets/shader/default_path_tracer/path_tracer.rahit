#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_ray_tracing : require

#include "defines.h"
#include "../utils/glsl/ray_tracing_utils.glsl"


#define CONV_TEXTURE_BINDING BINDLESS_IMAGE_DESC_BINDING
#define CONV_TEXTURE_SET BINDLESS_IMAGE_DESC_SET
#include "../convenience/glsl/texture_data.glsl"


#define CONV_INDEX_BUFFER_BINDING GLOBAL_DESC_INDEX_BUFFER_BINDING
#define CONV_INDEX_BUFFER_SET GLOBAL_DESC_SET
#define CONV_VERTEX_BUFFER_BINDING GLOBAL_DESC_VERTEX_BUFFER_BINDING
#define CONV_VERTEX_BUFFER_SET GLOBAL_DESC_SET
#include "../convenience/glsl/vertex_data.glsl"

#define CONV_GEOMETRY_BUFFER_BINDING GLOBAL_DESC_GEOMETRY_DATA_BINDING
#define CONV_GEOMETRY_BUFFER_SET GLOBAL_DESC_SET
#include "../convenience/glsl/as_data.glsl"

#define CONV_MATERIAL_BUFFER_BINDING GLOBAL_DESC_MATERIAL_BUFFER_BINDING
#define CONV_MATERIAL_BUFFER_SET GLOBAL_DESC_SET
#include "../convenience/glsl/material_data.glsl"

hitAttributeEXT vec2 hitAttribute;

void main() 
{
	const vec3 barycentricCoords = computeBarycentric(hitAttribute);
	const GeometryData_s geometry_data = geometry_buffer[gl_InstanceCustomIndexEXT + gl_GeometryIndexEXT];
	const Material_s material = material_buffer[geometry_data.data_index];

	
	if(material.baseColorFactor.a == 0) ignoreIntersectionEXT;
	else if(material.baseColorTexIdx != -1){
		uint idx_0 = 0;
		uint idx_1 = 0;
		uint idx_2 = 0;
		if((geometry_data.flags & eGeoDataIndexedTriangleBit) > 0){
			idx_0 = index_buffer[geometry_data.index_buffer_offset + (gl_PrimitiveID * 3) + 0];
			idx_1 = index_buffer[geometry_data.index_buffer_offset + (gl_PrimitiveID * 3) + 1];
			idx_2 = index_buffer[geometry_data.index_buffer_offset + (gl_PrimitiveID * 3) + 2];
		} else {
			idx_0 = (gl_PrimitiveID * 3) + 0;
			idx_1 = (gl_PrimitiveID * 3) + 1;
			idx_2 = (gl_PrimitiveID * 3) + 2;
		}

		const vec2 uv_0 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_0].texture_coordinates_0.xy;
		const vec2 uv_1 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_1].texture_coordinates_0.xy;
		const vec2 uv_2 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_2].texture_coordinates_0.xy;
		const vec2 uv = uv_0 * barycentricCoords.x + uv_1 * barycentricCoords.y + uv_2 * barycentricCoords.z;

		if(material.alphaDiscard && texture(texture_sampler[material.baseColorTexIdx], uv).a  <= material.alphaDiscardValue) ignoreIntersectionEXT;
	}
	
}