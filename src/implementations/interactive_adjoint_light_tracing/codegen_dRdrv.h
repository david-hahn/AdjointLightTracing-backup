// generated by RotVecDerivs.mlx
// assume we have a rotation vector r=(r1;r2;r3), and we rotate some other (constant) vector n=(n1;n2;n3)
// to produce v=R(r)*n, where R(r) is a rotation matrix defined by Rodrigues' formula
// here we compute dv/dr = (dR/dr)*n assuming that (R*dn/dr)==0 as n is assumed const.
// before including define a real type like: using r_t = float;
// and allocate dvdr for a (3x3) matrix that will hold the result - with access like dvdr[2][2]
r_t  t2 = r1*r1;
r_t  t3 = r2*r2;
r_t  t4 = r3*r3;
r_t  t5 = t2+t3+t4;
r_t  t6 = sqrt(t5);
r_t  t7 = cos(t6);
r_t  t8 = 1.0/t5;
r_t  t9 = sin(t6);
r_t  t10 = 1.0/pow(t5,3.0/2.0);
r_t  t11 = t7-1.0;
r_t  t12 = 1.0/(t5*t5);
r_t  t13 = 1.0/sqrt(t5);
r_t  t14 = t3*t7;
r_t  t15 = t4*t7;
r_t  t16 = t2+t14+t15;
r_t  t17 = r2*r3*t9*t10;
r_t  t18 = t9*t13;
r_t  t19 = r1*r2*r3*t9*t10;
r_t  t20 = r1*r2*r3*t11*t12*2.0;
r_t  t21 = r1*r3*t9*t10;
r_t  t22 = r2*t2*t9*t10;
r_t  t23 = r2*t2*t11*t12*2.0;
r_t  t24 = r1*t4*t9*t13;
r_t  t25 = r2*r3*t7*t8;
r_t  t26 = r1*t3*t9*t10;
r_t  t27 = r1*t3*t11*t12*2.0;
r_t  t28 = r1*r2*t7*t8;
r_t  t29 = r2*t4*t9*t13;
r_t  t30 = t2*t7;
r_t  t31 = t3+t15+t30;
r_t  t32 = r1*r3*t7*t8;
r_t  t33 = t4*t9*t10;
r_t  t34 = r3*t4*t9*t13;
r_t  t35 = r1*r2*t9*t10;
r_t  t36 = r3*t2*t9*t10;
r_t  t37 = r3*t2*t11*t12*2.0;
r_t  t38 = t2*t9*t10;
r_t  t39 = r1*t2*t9*t13;
r_t  t40 = r1*t3*t9*t13;
r_t  t41 = r3*t3*t9*t10;
r_t  t42 = r3*t3*t11*t12*2.0;
r_t  t43 = t3*t7*t8;
r_t  t44 = r2*t3*t9*t13;
r_t  t45 = r2*t2*t9*t13;
r_t  t46 = t4+t14+t30;
r_t  t47 = r1*t4*t9*t10;
r_t  t48 = r1*t4*t11*t12*2.0;
r_t  t49 = r2*t4*t9*t10;
r_t  t50 = r2*t4*t11*t12*2.0;
r_t  t51 = r3*t2*t9*t13;
r_t  t52 = r3*t3*t9*t13;
dvdr(0,0) = v2*(t21+t22+t23-r2*t8*t11-r1*r3*t7*t8)+v3*(t28+t36+t37-r3*t8*t11-r1*r2*t9*t10)-t8*v1*(r1*-2.0+t24+t40)-r1*t12*t16*v1*2.0;
dvdr(0,1) = v2*(t17+t26+t27-r1*t8*t11-r2*r3*t7*t8)+v3*(t18+t19+t20+t43-t3*t9*t10)-t8*v1*(t29+t44-r2*t7*2.0)-r2*t12*t16*v1*2.0;
dvdr(0,2) = v3*(-t17+t25+t47+t48-r1*t8*t11)+v2*(-t18+t19+t20+t33-t4*t7*t8)-t8*v1*(t34+t52-r3*t7*2.0)-r3*t12*t16*v1*2.0;
dvdr(1,0) = v1*(-t21+t22+t23+t32-r2*t8*t11)+v3*(-t18+t19+t20+t38-t2*t7*t8)-t8*v2*(t24+t39-r1*t7*2.0)-r1*t12*t31*v2*2.0;
dvdr(1,1) = v1*(-t17+t25+t26+t27-r1*t8*t11)+v3*(-t28+t35+t41+t42-r3*t8*t11)-t8*v2*(r2*-2.0+t29+t45)-r2*t12*t31*v2*2.0;
dvdr(1,2) = v3*(t21-t32+t49+t50-r2*t8*t11)+v1*(t18+t19+t20-t33+t4*t7*t8)-t8*v2*(t34+t51-r3*t7*2.0)-r3*t12*t31*v2*2.0;
dvdr(2,0) = v1*(-t28+t35+t36+t37-r3*t8*t11)+v2*(t18+t19+t20-t38+t2*t7*t8)-t8*v3*(t39+t40-r1*t7*2.0)-r1*t12*t46*v3*2.0;
dvdr(2,1) = v2*(t28-t35+t41+t42-r3*t8*t11)+v1*(-t18+t19+t20-t43+t3*t9*t10)-t8*v3*(t44+t45-r2*t7*2.0)-r2*t12*t46*v3*2.0;
dvdr(2,2) = v1*(t17-t25+t47+t48-r1*t8*t11)+v2*(-t21+t32+t49+t50-r2*t8*t11)-t8*v3*(r3*-2.0+t51+t52)-r3*t12*t46*v3*2.0;
